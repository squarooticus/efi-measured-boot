#! /bin/bash

exec 3>&1 1>&2

. ./functions
. ./bash_functions

remove_keyscript_option() {
    local IFS=','
    declare -a work
    work=( $1 )
    for i in "${!work[@]}"; do
        if [[ ${work[$i]} == keyscript=* ]]; then
            unset -v work[$i]
        fi
    done
    work=("${work[@]}")
    echo "${work[*]}"
}

add_keyscript_option() {
    local IFS=','
    declare -a work
    work=( $1 )
    work+=( "keyscript=$APPDIR/emboot_unseal.sh" )
    echo "${work[*]}"
}

CONFIGDIR=/etc/efi-measured-boot
HOOKSDIR=/etc/initramfs-tools/hooks
APPDIR=/usr/local/share/efi-measured-boot
BINDIR=/usr/local/sbin

set -e

. /etc/os-release
OS_NAME=$NAME
OS_SHORT_NAME=$ID

efidevinfo=( $(./get_device_info /boot/efi) )

test -e "$HOOKSDIR"
cp -f initramfs-hooks/efi-measured-boot "$HOOKSDIR/"

mkdir -p "$APPDIR"
cp -f bash_functions emboot_install emboot_seal_key emboot_unseal.sh emboot_update_efi_apps functions get_crypttab_entry get_device_info "$APPDIR/"

mkdir -p "$BINDIR"
cp -f update-emboot "$BINDIR/"

(cd tpm_futurepcr && pip3 install .)

rootdevinfo=( $(./get_device_info /) )
cryptdev=( $(./get_crypttab_entry ${rootdevinfo[1]}) )

cryptopts=${cryptdev[3]}
if [[ $cryptopts != *luks* ]]; then
    echo "ERROR: crypttab entry missing luks option: $cryptopts"
    exit 1
fi
if [[ $cryptopts == *keyscript=* ]]; then
    echo "WARNING: existing keyscript option will be replaced: $cryptopts"
    cryptopts=$(remove_keyscript_option "$cryptopts")
fi
cryptopts=$(add_keyscript_option "$cryptopts")

rm -f /etc/crypttab.pre_emboot

### BREAKING BOOT CHANGES BEGIN HERE

revert_changes() {
    echo "CLEANING UP"
    if [ -e /etc/crypttab.pre_emboot ]; then
        echo "reverting crypttab" 1>&2
        mv -f /etc/crypttab.pre_emboot /etc/crypttab
    fi
    rm -f "$cfgfile.new"
}

trap revert_changes INT TERM ERR
trap 'rc=$?; [ "$rc" -eq 0 ] && exit 0; revert_changes' EXIT

# Write config
mkdir -p "$CONFIGDIR"
cfgfile=$CONFIGDIR/config
if [ -e "$cfgfile" ]; then
    cfgfile="$cfgfile.new"
    echo "Preserving existing config: examine $cfgfile.new and move into place or merge by hand"
fi
cat >$cfgfile <<EOF
EFI_MOUNT=/boot/efi
EFI_PART=$(quote_args "${efidevinfo[1]}")
OS_NAME=$(quote_args "$OS_NAME")
OS_SHORT_NAME=$(quote_args "$OS_SHORT_NAME")
COUNTER_HANDLE=0x01926001
SEAL_PCRS=0,2,4
LUKS_KEY=/etc/keys/root-emboot.key
KERNEL_PARAMS="ro add_efi_memmap"
APPDIR=$(quote_args "$APPDIR")
EOF

# Modify crypttab
echo "Modifying crypttab"
cat /etc/crypttab | awk -v newopts="$cryptopts" '$1 == "'"${cryptdev[0]}"'" && $2 == "'"${cryptdev[1]}"'" { print "#" $0; print $1 " " $2 " " $3 " " newopts; next; }  { print $0; }' >/etc/crypttab.new
mv -f /etc/crypttab /etc/crypttab.pre_emboot
mv -f /etc/crypttab.new /etc/crypttab

exit 0
