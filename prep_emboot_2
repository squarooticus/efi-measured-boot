#! /bin/bash

exec 3>&1 1>&2

quote_re() {
    echo "$1" | sed -e 's/[]\/\\^$*+?.()|[{}-]/\\\0/g'
}

device_to_disk_and_partition() {
    dev=$1
    devpartuuid=$(lsblk -n -o PARTUUID -r "$dev" | tr a-z A-Z)
    parents=( $(lsblk -s -n -o NAME -r "$dev" | tail -n +2) )
    if (( ${#parents[@]} != 1 )); then
        echo "Don't know how to handle $dev with more than one parent: ${parents[*]}" 1>&2
        exit 1
    fi
    disk=/dev/${parents[0]}
    part=$(echo "$dev" | grep -o '[0-9]\+$')
    checkuuid=$(sgdisk "$disk" -i "$part" | grep -i 'Partition unique GUID' | sed 's/^.*://; s/[[:space:]]\+//g' | tr a-z A-Z)
    if [[ "$devpartuuid" != "$checkuuid" ]]; then
        echo "$dev somehow not $disk partition $part: PARTUUID mismatch ($devpartuuid vs $checkuuid)" 1>&2
        exit 1
    fi
    echo "$disk $part"
}

CONFIGDIR=/etc/efi-measured-boot

. "$CONFIGDIR"/config
. "$APPDIR"/functions

set -e

provision_counter

rootdevinfo=( $(./scripts/get_device_info /) )
cryptdev=( $(./scripts/get_crypttab_entry ${rootdevinfo[1]}) )

### BREAKING CHANGES BEGIN HERE

revert_changes() {
    echo "CLEANING UP"
    if [ -r "$LUKS_KEY" ]; then
        cryptsetup luksRemoveKey "${cryptdev[1]}" "$LUKS_KEY"
    fi
}

trap revert_changes INT TERM ERR
trap 'rc=$?; [ "$rc" -eq 0 ] && exit 0; revert_changes' EXIT

# Create a new key and add it to the LUKS header of the root partition
mkdir -m 0700 -p $(dirname "$LUKS_KEY")
if [ -e "$LUKS_KEY" ]; then
    echo "Using existing key $LUKS_KEY" 1>&2
else
    echo "Generating new key for root partition LUKS header" 1>&2
    (umask 077 && dd if=/dev/urandom of="$LUKS_KEY" bs=128 count=1)
fi
echo "You may be prompted to enter an existing LUKS passphrase for your root partition" 1>&2
cryptsetup luksAddKey "${cryptdev[1]}" "$LUKS_KEY"

echo "Setting next EFI boot to new entry" 1>&2
efidevinfo=( $(./scripts/get_device_info /boot/efi) )
efi_disk_and_part=( $(device_to_disk_and_partition ${efidevinfo[1]}) )
efidisk=${efi_disk_and_part[0]}
efipartition=${efi_disk_and_part[1]}
efipartuuid=$(lsblk -n -o PARTUUID -r "${efidevinfo[1]}" | tr a-z A-Z)
efientries=( $(efibootmgr -v | grep -i '^Boot[0-9]\+.*'"$(quote_re "$OS_NAME")"' measured boot.*'"$(quote_re "$efipartuuid")" | grep -v OLD | sed -e 's/^Boot//; s/[^0-9].*//') )
if (( ${#efientries[@]} == 0 )); then
    echo "Can't find new EFI boot entry" 1>&2
    exit 1
fi
efibootmgr -n "${efientries[0]}"

echo "Installing EFI blobs" 1>&2
./scripts/emboot_install
