#! /bin/bash

exec 3>&1 1>&2

. /etc/efi-measured-boot/config
. ./functions
. ./bash_functions

set -e

provision_counter

rootdevinfo=( $(./get_device_info /) )
cryptdev=( $(./get_crypttab_entry ${rootdevinfo[1]}) )

### BREAKING CHANGES BEGIN HERE

revert_changes() {
    echo "CLEANING UP"
    if [ -r "$LUKS_KEY" ]; then
        cryptsetup luksRemoveKey "${cryptdev[1]}" "$LUKS_KEY"
    fi
}

#trap revert_changes INT TERM ERR
trap 'rc=$?; [ "$rc" -eq 0 ] && exit 0; revert_changes' EXIT

# Update initrd according to newly-installed hook
update-initramfs -u -k all

# Create a new key and add it to the LUKS header of the root partition
mkdir -m 0700 -p $(dirname "$LUKS_KEY")
if [ -e "$LUKS_KEY" ]; then
    echo "Using existing key $LUKS_KEY" 1>&2
else
    echo "Generating new key for root partition LUKS header" 1>&2
    (umask 077 && dd if=/dev/urandom of="$LUKS_KEY" bs=128 count=1)
fi
echo "You may be prompted to enter an existing LUKS passphrase for your root partition" 1>&2
cryptsetup luksAddKey "${cryptdev[1]}" "$LUKS_KEY"

echo "Installing EFI blobs" 1>&2
./emboot_install

echo "Adding EFI boot entries" 1>&2
./emboot_update_efi_apps

echo "Setting next EFI boot to latest emboot kernel blob" 1>&2
kvers=( $(list_emboot_kernel_versions) )
if (( ${#kvers[@]} == 0 )); then
    echo "Can't find any emboot kernel blobs" 1>&2
    exit 1
fi
pk=${kvers[0]}
read_emboot_efi_apps
bn=${emboot_efi_apps[$(echo -n "$pk" | tr a-z A-Z)]}
if [ -z "$bn" ]; then
    echo "Can't find emboot EFI boot entry for kernel $pk" 1>&2
    exit 1
fi
efibootmgr -n "$bn"

exit 0
